// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:37:59 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code DirecTV".


#include "IRremote.h"
/*
IRP: 
{38k,600,msb}<1,-1|1,-2|2,-1|2,-2>([10][5],-2,D:4,F:8,C:4,1,-50){C=7*(F:2:6)+5*(F:2:4)+3*(F:2:2)+(F:2)}[D:0..15,F:0..255]
*/

/*
Protocol documentation:
There are six variants of the DirecTV protocol, distinguished in RemoteMaster by the parameter \"Parm\" on the Setup page. The Parm value is shown in the Misc field of DecodeIR. The IRP notation above corresponds to the default Parm=3. The various Parm values correspond to three different frequencies (the 38k in the above) and two different lead-out times (the -50 in the above). The corresponding values are: Parm=0 : 40k, -15 Parm=1 : 40k, -50 Parm=2 : 38k, -15 Parm=3 : 38k, -50 Parm=4 : 57k, -15 Parm=5 : 57k, -50
*/

#if SEND_DIRECTV

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    static unsigned int pendingBits = 0U;
    static unsigned int pendingData = 0U;
    if (pendingBits > 0U) {
        // This code is valid for msb-first only
        data &= (1U << width) - 1U;
        data |= pendingData << width;
        width += pendingBits;
        pendingBits = 0U;
    }
    if (width % 2U != 0U) {
        pendingData = data;
        pendingBits = width;
        width = 0U;
    }
    for (unsigned int i = 0; i < width; i += 2) {
        switch(((unsigned int)data >> (width - i - 2)) & 3) {
        case 0: {
            flash(instance, 600);
            gap(instance, 600);
        }
        break;
        case 1: {
            flash(instance, 600);
            gap(instance, 1200);
        }
        break;
        case 2: {
            flash(instance, 1200);
            gap(instance, 600);
        }
        break;
        case 3: {
            flash(instance, 1200);
            gap(instance, 1200);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int C(unsigned int D,
        unsigned int F) {
    return ((((7U) * (finiteBitField(F, 2U, 6U, false, false))) + ((5U) * (finiteBitField(F, 2U, 4U, false, false)))) + ((3U) * (finiteBitField(F, 2U, 2U, false, false)))) + (finiteBitField(F, 2U, 0, false, false));
}

/**
 * Function for sending one signal from the protcol DirecTV.
 * @param D Protocol parameter in the interval [0 .. 15].
 * @param F Protocol parameter in the interval [0 .. 255].
 */
void IRsend::sendDirecTV(unsigned int D,
        unsigned int F) {
    enableIROut(38000U / 1000U);
    IRsend* instance = this;
    flash(instance, 6000);
    gap(instance, 1200);
    bitField(instance, D, 4U);
    bitField(instance, F, 8U);
    bitField(instance, C(D, F), 4U);
    flash(instance, 600);
    gap(instance, 30000);
}

#endif // SEND_DIRECTV 
