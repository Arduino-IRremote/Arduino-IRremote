// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:47:24 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code XMP-2".


#include "IRremote.h"
/*
IRP: 
{38k,136,msb}<210u,-760u|210u,-896u|210u,-1032u|210u,-1168u|210u,-1304u|210u,-1449u|210u,-1576u|210u,-1712u|210u,-1848u|210u,-1984u|210u,-2120u|210u,-2256u|210u,-2392u|210u,-2528u|210u,-2664u|210u,-2800u>([T=0][T=8],S:4:4,C1:4,S:4,15:4,OEM:8,D:8,210u,-13.8m,S:4:4,C2:4,T:4,S:4,F:16,210u,-80.4m){C1=-(S+S::4+15+OEM+OEM::4+D+D::4),C2=-(S+S::4+T+F+F::4+F::8+F::12)}[D:0..255,S:0..255,F:0..255,OEM:0..255=68]
*/

/*
Protocol documentation:

*/

#if SEND_XMP2

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    static unsigned int pendingBits = 0U;
    static unsigned int pendingData = 0U;
    if (pendingBits > 0U) {
        // This code is valid for msb-first only
        data &= (1U << width) - 1U;
        data |= pendingData << width;
        width += pendingBits;
        pendingBits = 0U;
    }
    if (width % 4U != 0U) {
        pendingData = data;
        pendingBits = width;
        width = 0U;
    }
    for (unsigned int i = 0; i < width; i += 4) {
        switch(((unsigned int)data >> (width - i - 4)) & 15) {
        case 0: {
            flash(instance, 210);
            gap(instance, 760);
        }
        break;
        case 1: {
            flash(instance, 210);
            gap(instance, 896);
        }
        break;
        case 2: {
            flash(instance, 210);
            gap(instance, 1032);
        }
        break;
        case 3: {
            flash(instance, 210);
            gap(instance, 1168);
        }
        break;
        case 4: {
            flash(instance, 210);
            gap(instance, 1304);
        }
        break;
        case 5: {
            flash(instance, 210);
            gap(instance, 1449);
        }
        break;
        case 6: {
            flash(instance, 210);
            gap(instance, 1576);
        }
        break;
        case 7: {
            flash(instance, 210);
            gap(instance, 1712);
        }
        break;
        case 8: {
            flash(instance, 210);
            gap(instance, 1848);
        }
        break;
        case 9: {
            flash(instance, 210);
            gap(instance, 1984);
        }
        break;
        case 10: {
            flash(instance, 210);
            gap(instance, 2120);
        }
        break;
        case 11: {
            flash(instance, 210);
            gap(instance, 2256);
        }
        break;
        case 12: {
            flash(instance, 210);
            gap(instance, 2392);
        }
        break;
        case 13: {
            flash(instance, 210);
            gap(instance, 2528);
        }
        break;
        case 14: {
            flash(instance, 210);
            gap(instance, 2664);
        }
        break;
        case 15: {
            flash(instance, 210);
            gap(instance, 2800);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int C1(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int OEM,
        unsigned int T) {
    return -(((((((S) + (((S) >> (4U)))) + (15U)) + (OEM)) + (((OEM) >> (4U)))) + (D)) + (((D) >> (4U))));
}

static inline unsigned int C2(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int OEM,
        unsigned int T) {
    return -(((((((S) + (((S) >> (4U)))) + (T)) + (F)) + (((F) >> (4U)))) + (((F) >> (8U)))) + (((F) >> (12U))));
}

/**
 * Function for sending one signal from the protcol XMP2.
 * @param D Protocol parameter in the interval [0 .. 255].
 * @param S Protocol parameter in the interval [0 .. 255].
 * @param F Protocol parameter in the interval [0 .. 255].
 * @param OEM Protocol parameter in the interval [0 .. 255].
 */
void IRsend::sendXMP2(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int OEM) {
    enableIROut(38000U / 1000U);
    IRsend* instance = this;
    unsigned int T;
    T = 0U;
    bitField(instance, S >> (4U), 4U);
    bitField(instance, C1(D, S, F, OEM, T), 4U);
    bitField(instance, S, 4U);
    bitField(instance, 15U, 4U);
    bitField(instance, OEM, 8U);
    bitField(instance, D, 8U);
    flash(instance, 210);
    gap(instance, 13800);
    bitField(instance, S >> (4U), 4U);
    bitField(instance, C2(D, S, F, OEM, T), 4U);
    bitField(instance, T, 4U);
    bitField(instance, S, 4U);
    bitField(instance, F, 16U);
    flash(instance, 210);
    gap(instance, 80400);
}

#endif // SEND_XMP2 
