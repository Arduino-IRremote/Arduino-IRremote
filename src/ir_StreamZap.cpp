// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:45:53 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code StreamZap".


#include "IRremote.h"
/*
IRP: 
{36k,msb,889}<1,-1|-1,1>(1,~F:1:6,T:1,D:6,F:6,^114m)*[D:0..63,F:0..63,T:0..1]
*/

/*
Protocol documentation:
DecodeIR V2.43 decodes this as RC5-7F.
*/

#if SEND_STREAMZAP

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);

static unsigned long durationCounter = 0UL;

static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
    durationCounter += (unsigned long) d;
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
    durationCounter += (unsigned long) d;
}

static inline void extent(IRsend* instance, unsigned long d) {
    instance->space((unsigned int)(d - durationCounter));
    durationCounter = 0UL;
}

static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            flash(instance, 889);
            gap(instance, 889);
        }
        break;
        case 1: {
            gap(instance, 889);
            flash(instance, 889);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol StreamZap.
 * @param D Protocol parameter in the interval [0 .. 63].
 * @param F Protocol parameter in the interval [0 .. 63].
 * @param T Protocol parameter in the interval [0 .. 1].
 */
void IRsend::sendStreamZap(unsigned int D,
        unsigned int F,
        unsigned int T) {
    enableIROut(36000U / 1000U);
    IRsend* instance = this;
    durationCounter = 0UL;
    flash(instance, 889);
    bitField(instance, ~F >> (6U), 1U);
    bitField(instance, T, 1U);
    bitField(instance, D, 6U);
    bitField(instance, F, 6U);
    extent(instance, 114000UL);
}

#endif // SEND_STREAMZAP 
