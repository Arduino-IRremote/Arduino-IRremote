// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:42:11 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Nokia32".


#include "IRremote.h"
/*
IRP: 
{36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>((15,-10,D:8,S:8,T:1,X:7,F:8,6,^100m)*,T=1-T)[D:0..255,S:0..255,F:0..255,T@:0..1=0,X:0..127]
*/

/*
Protocol documentation:
The Nokia32 protocol is one variation of the RCMM 1.5 protocol developed by Philips. RCMM refers to X as \"System\" and to D:2,S:4:4 as \"Customer\". The parameters have been taken from here.
*/

#if SEND_NOKIA32

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);

static unsigned long durationCounter = 0UL;

static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
    durationCounter += (unsigned long) d;
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
    durationCounter += (unsigned long) d;
}

static inline void extent(IRsend* instance, unsigned long d) {
    instance->space((unsigned int)(d - durationCounter));
    durationCounter = 0UL;
}

static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    static unsigned int pendingBits = 0U;
    static unsigned int pendingData = 0U;
    if (pendingBits > 0U) {
        // This code is valid for msb-first only
        data &= (1U << width) - 1U;
        data |= pendingData << width;
        width += pendingBits;
        pendingBits = 0U;
    }
    if (width % 2U != 0U) {
        pendingData = data;
        pendingBits = width;
        width = 0U;
    }
    for (unsigned int i = 0; i < width; i += 2) {
        switch(((unsigned int)data >> (width - i - 2)) & 3) {
        case 0: {
            flash(instance, 167);
            gap(instance, 278);
        }
        break;
        case 1: {
            flash(instance, 167);
            gap(instance, 444);
        }
        break;
        case 2: {
            flash(instance, 167);
            gap(instance, 611);
        }
        break;
        case 3: {
            flash(instance, 167);
            gap(instance, 778);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Nokia32.
 * @param D Protocol parameter in the interval [0 .. 255].
 * @param S Protocol parameter in the interval [0 .. 255].
 * @param F Protocol parameter in the interval [0 .. 255].
 * @param T Protocol parameter in the interval [0 .. 1].
 * @param X Protocol parameter in the interval [0 .. 127].
 */
void IRsend::sendNokia32(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int T,
        unsigned int X) {
    enableIROut(36000U / 1000U);
    IRsend* instance = this;
    durationCounter = 0UL;
    flash(instance, 417);
    gap(instance, 278);
    bitField(instance, D, 8U);
    bitField(instance, S, 8U);
    bitField(instance, T, 1U);
    bitField(instance, X, 7U);
    bitField(instance, F, 8U);
    flash(instance, 167);
    extent(instance, 100000UL);
}

#endif // SEND_NOKIA32 
