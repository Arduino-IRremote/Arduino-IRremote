// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:42:34 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code OrtekMCE".


#include "IRremote.h"
/*
IRP: 
{38.6k,480}<1,-1|-1,1>([P=0][P=1][P=2],4,-1,D:5,P:2,F:6,C:4,-48m)+{C=3+#D+#P+#F}[D:0..31,F:0..63]
*/

/*
Protocol documentation:
The repeat frames are not all identical. P is a position code: 0 for the start frame of a repeat sequence, 2 for the end frame and 1 for all frames in between. C is a checksum, 3 more than the number of 1 bits in D, P, F together. DecodeIR v2.37 and later check P and will report in the Misc field if either the start or end frame, or both, is/are missing.
*/

#if SEND_ORTEKMCE

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 480);
            gap(instance, 480);
        }
        break;
        case 1: {
            gap(instance, 480);
            flash(instance, 480);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int C(unsigned int D,
        unsigned int F,
        unsigned int P) {
    return (((3U) + (bitCount(D))) + (bitCount(P))) + (bitCount(F));
}

/**
 * Function for sending one signal from the protcol OrtekMCE.
 * @param D Protocol parameter in the interval [0 .. 31].
 * @param F Protocol parameter in the interval [0 .. 63].
 */
void IRsend::sendOrtekMCE(unsigned int D,
        unsigned int F) {
    enableIROut(38600U / 1000U);
    IRsend* instance = this;
    unsigned int P;
    P = 0U;
    flash(instance, 1920);
    gap(instance, 480);
    bitField(instance, D, 5U);
    bitField(instance, P, 2U);
    bitField(instance, F, 6U);
    bitField(instance, C(D, F, P), 4U);
    gap(instance, 48000);
}

#endif // SEND_ORTEKMCE 
