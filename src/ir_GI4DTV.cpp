// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:39:12 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code G.I.4DTV".


#include "IRremote.h"
/*
IRP: 
{37.3k,992}<1,-1|1,-3>(5,-2,F:6,D:2,C:4,1,-60)*{C=((#(F&25)+#(D&5))&1)+2*((#(F&43)+#(D&7))&1)+4*((#(F&22)+#(D&7))&1)+8*((#(F&44)+#(D&6))&1)}[D:0..3,F:0..63]
*/

/*
Protocol documentation:
This is a moderately robust protocol, but spurious decodes are still possible. Unit (device) numbers from 0 to 7 are supported. The check sum C is a Hamming Code, which can correct single bit errors. D:1:2 is encoded in the check sum. See forum thread.
*/

#if SEND_GI4DTV

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 992);
            gap(instance, 992);
        }
        break;
        case 1: {
            flash(instance, 992);
            gap(instance, 2976);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int C(unsigned int D,
        unsigned int F) {
    return (((((bitCount((F)&(25U))) + (bitCount((D)&(5U))))&(1U)) + ((2U) * (((bitCount((F)&(43U))) + (bitCount((D)&(7U))))&(1U)))) + ((4U) * (((bitCount((F)&(22U))) + (bitCount((D)&(7U))))&(1U)))) + ((8U) * (((bitCount((F)&(44U))) + (bitCount((D)&(6U))))&(1U)));
}

/**
 * Function for sending one signal from the protcol GI4DTV.
 * @param D Protocol parameter in the interval [0 .. 3].
 * @param F Protocol parameter in the interval [0 .. 63].
 */
void IRsend::sendGI4DTV(unsigned int D,
        unsigned int F) {
    enableIROut(37300U / 1000U);
    IRsend* instance = this;
    flash(instance, 4960);
    gap(instance, 1984);
    bitField(instance, F, 6U);
    bitField(instance, D, 2U);
    bitField(instance, C(D, F), 4U);
    flash(instance, 992);
    gap(instance, 59520);
}

#endif // SEND_GI4DTV 
