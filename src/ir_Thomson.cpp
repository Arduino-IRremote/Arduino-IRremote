// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:46:21 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Thomson".


#include "IRremote.h"
/*
IRP: 
{33k,500}<1,-4|1,-9>((D:4,T:1,D:1:4,F:6,1,^80m)*,T=1-T)[D:0..31,F:0..63,T@:0..1=0]
*/

/*
Protocol documentation:
This is not a robust protocol, so spurious decodes are likely. DecodeIR2.42 deprecates Thompson (5 bits of device, and 6 bits of function) and reports these signals as Thompson7 (4 bits of device and 7 bits of function).
*/

#if SEND_THOMSON

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);

static unsigned long durationCounter = 0UL;

static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
    durationCounter += (unsigned long) d;
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
    durationCounter += (unsigned long) d;
}

static inline void extent(IRsend* instance, unsigned long d) {
    instance->space((unsigned int)(d - durationCounter));
    durationCounter = 0UL;
}

static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 500);
            gap(instance, 2000);
        }
        break;
        case 1: {
            flash(instance, 500);
            gap(instance, 4500);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Thomson.
 * @param D Protocol parameter in the interval [0 .. 31].
 * @param F Protocol parameter in the interval [0 .. 63].
 * @param T Protocol parameter in the interval [0 .. 1].
 */
void IRsend::sendThomson(unsigned int D,
        unsigned int F,
        unsigned int T) {
    enableIROut(33000U / 1000U);
    IRsend* instance = this;
    durationCounter = 0UL;
    bitField(instance, D, 4U);
    bitField(instance, T, 1U);
    bitField(instance, D >> (4U), 1U);
    bitField(instance, F, 6U);
    flash(instance, 500);
    extent(instance, 80000UL);
}

#endif // SEND_THOMSON 
