// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:37:37 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Denon-K".


#include "IRremote.h"
/*
IRP: 
{37k,432}<1,-1|1,-3>(8,-4,84:8,50:8,0:4,D:4,S:4,F:12,((D*16)^S^(F*16)^(F:8:4)):8,1,-173)*[D:0..15,S:0..15,F:0..4095]
*/

/*
Protocol documentation:
Denon-K is the member of the Kaseikyo family with OEM_code1=84 and OEM_code2=50. Denon-K uses the same check byte rules as Panasonic protocol, but uses the data bits differently. The Denon-K choice in RemoteMaster uses the same protocol executor as Panasonic combo, but computes the hex commands based on Denon's use of the Kaseikyo data bits.
*/

#if SEND_DENONK

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 432);
            gap(instance, 432);
        }
        break;
        case 1: {
            flash(instance, 432);
            gap(instance, 1296);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol DenonK.
 * @param D Protocol parameter in the interval [0 .. 15].
 * @param S Protocol parameter in the interval [0 .. 15].
 * @param F Protocol parameter in the interval [0 .. 4095].
 */
void IRsend::sendDenonK(unsigned int D,
        unsigned int S,
        unsigned int F) {
    enableIROut(37000U / 1000U);
    IRsend* instance = this;
    flash(instance, 3456);
    gap(instance, 1728);
    bitField(instance, 84U, 8U);
    bitField(instance, 50U, 8U);
    bitField(instance, 0U, 4U);
    bitField(instance, D, 4U);
    bitField(instance, S, 4U);
    bitField(instance, F, 12U);
    bitField(instance, ((((D) * (16U))^(S))^((F) * (16U)))^(finiteBitField(F, 8U, 4U, false, false)), 8U);
    flash(instance, 432);
    gap(instance, 74736);
}

#endif // SEND_DENONK 
