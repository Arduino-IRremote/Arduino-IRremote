// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:41:26 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code NEC-Shirriff".


#include "IRremote.h"
/*
IRP: 
{38.4k,msb,564}<1,-1|1,-3>(16,-8,data:length,1,-1)[data:0..UINT32_MAX,length:1..64]
*/

/*
Protocol documentation:
Like NEC1 but without repeat, just one large parameter, and msb bit order, and no sensible ending silence.
*/

#if SEND_NECSHIRRIFF

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            flash(instance, 564);
            gap(instance, 564);
        }
        break;
        case 1: {
            flash(instance, 564);
            gap(instance, 1692);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol NECShirriff.
 * @param data Protocol parameter in the interval [0 .. 4294967295].
 * @param length Protocol parameter in the interval [1 .. 64].
 */
void IRsend::sendNECShirriff(unsigned int data,
        unsigned int length) {
    enableIROut(38400U / 1000U);
    IRsend* instance = this;
    flash(instance, 9024);
    gap(instance, 4512);
    bitField(instance, data, length);
    flash(instance, 564);
    gap(instance, 564);
}

#endif // SEND_NECSHIRRIFF 
