// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:38:35 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code F12".


#include "IRremote.h"
/*
IRP: 
{37.9k,422}<1,-3|3,-1>((D:3,S:1,F:8,-80)2,-128)*[D:0..7,S:0..1,F:0..255]
*/

/*
Protocol documentation:
Old version of the F12 specification. See DecodeIR.
*/

#if SEND_F12

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 422);
            gap(instance, 1266);
        }
        break;
        case 1: {
            flash(instance, 1266);
            gap(instance, 422);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol F12.
 * @param D Protocol parameter in the interval [0 .. 7].
 * @param S Protocol parameter in the interval [0 .. 1].
 * @param F Protocol parameter in the interval [0 .. 255].
 */
void IRsend::sendF12(unsigned int D,
        unsigned int S,
        unsigned int F) {
    enableIROut(37900U / 1000U);
    IRsend* instance = this;
    bitField(instance, D, 3U);
    bitField(instance, S, 1U);
    bitField(instance, F, 8U);
    gap(instance, 33760);
    bitField(instance, D, 3U);
    bitField(instance, S, 1U);
    bitField(instance, F, 8U);
    gap(instance, 33760);
    gap(instance, 54016);
}

#endif // SEND_F12 
