// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:46:07 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code TDC-38".


#include "IRremote.h"
/*
IRP: 
{38k,315,msb}<-1,1|1,-1>(1,-1,D:5,S:5,F:7,-89m)*[D:0..31,S:0..31,F:0..127]
*/

/*
Protocol documentation:
There are two variants of this protocol, with different frequencies but with the same number of carrier cycles in each burst, which makes the duration of a burst also differ. TDC-38 has a 38kHz carrier and is used by Danish TDC IPTV. TDC-56 has a 56.3kHz carrier and is used by Italian ALICE Home TV box. These implementations effectively use a 6-bit OBC as bit 0 of F is always the complement of bit 1, but there are other implementations which do not follow that pattern.
*/

#if SEND_TDC38

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            gap(instance, 315);
            flash(instance, 315);
        }
        break;
        case 1: {
            flash(instance, 315);
            gap(instance, 315);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol TDC38.
 * @param D Protocol parameter in the interval [0 .. 31].
 * @param S Protocol parameter in the interval [0 .. 31].
 * @param F Protocol parameter in the interval [0 .. 127].
 */
void IRsend::sendTDC38(unsigned int D,
        unsigned int S,
        unsigned int F) {
    enableIROut(38000U / 1000U);
    IRsend* instance = this;
    flash(instance, 315);
    gap(instance, 315);
    bitField(instance, D, 5U);
    bitField(instance, S, 5U);
    bitField(instance, F, 7U);
    gap(instance, 89000);
}

#endif // SEND_TDC38 
