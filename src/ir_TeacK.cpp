// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:46:16 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Teac-K".


#include "IRremote.h"
/*
IRP: 
{37k,432}<1,-1|1,-3>(8,-4,67:8,83:8,X:4,D:4,S:8,F:8,T:8,1,-100,(8,-8,1,-100)*){T=D+S:4:0+S:4:4+F:4:0+F:4:4}[D:0..15,S:0..255,F:0..255,X:0..15=1]
*/

/*
Protocol documentation:
Teac-K is the member of the Kaseikyo family with OEM_code1=67 and OEM_code2=83. Teac-K uses different repeat rules and a different check byte than other Kaseikyo protocols. 00BB requires 2-byte hex commands. DecodeIr returns both hex cmd bytes through the interface that usually means one or the other (for mini combos) but in this case it means both. This protocol signals repeats by the use of dittos.
*/

#if SEND_TEACK

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 432);
            gap(instance, 432);
        }
        break;
        case 1: {
            flash(instance, 432);
            gap(instance, 1296);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int T(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int X) {
    return ((((D) + (finiteBitField(S, 4U, 0, false, false))) + (finiteBitField(S, 4U, 4U, false, false))) + (finiteBitField(F, 4U, 0, false, false))) + (finiteBitField(F, 4U, 4U, false, false));
}

/**
 * Function for sending one signal from the protcol TeacK.
 * @param D Protocol parameter in the interval [0 .. 15].
 * @param S Protocol parameter in the interval [0 .. 255].
 * @param F Protocol parameter in the interval [0 .. 255].
 * @param X Protocol parameter in the interval [0 .. 15].
 */
void IRsend::sendTeacK(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int X) {
    enableIROut(37000U / 1000U);
    IRsend* instance = this;
    flash(instance, 3456);
    gap(instance, 1728);
    bitField(instance, 67U, 8U);
    bitField(instance, 83U, 8U);
    bitField(instance, X, 4U);
    bitField(instance, D, 4U);
    bitField(instance, S, 8U);
    bitField(instance, F, 8U);
    bitField(instance, T(D, S, F, X), 8U);
    flash(instance, 432);
    gap(instance, 43200);
}

#endif // SEND_TEACK 
