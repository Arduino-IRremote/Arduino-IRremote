// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:40:53 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Lutron".


#include "IRremote.h"
/*
IRP: 
{40k,2300,msb}<-1|1>(255:8,X:24,0:4)*[X:0..0xFFFFFF]
*/

/*
Protocol documentation:
This is an unusual protocol in that an 8-bit device code and 8-bit OBC are encoded in a 24-bit error-correcting code as the X of the IRP notation. This is constructed as follows. First two parity bits are appended to the 16 data bits to give even parity for the two sets of 9 bits taken alternately. The resulting 18-bit sequence is then treated as 6 octal digits (0-7) expressed in 3-bit binary code. These are then re-coded in the 3-bit Gray code (also called, more descriptively, the reflected-binary code) with a parity bit to give odd parity, so giving 6 4-bit groups treated as a single 24-bit sequence. The whole thing allows any single-bit error in transmission to be identified and corrected.
*/

#if SEND_LUTRON

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            gap(instance, 2300);
        }
        break;
        case 1: {
            flash(instance, 2300);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Lutron.
 * @param X Protocol parameter in the interval [0 .. 16777215].
 */
void IRsend::sendLutron(unsigned int X) {
    enableIROut(40000U / 1000U);
    IRsend* instance = this;
    bitField(instance, 255U, 8U);
    bitField(instance, X, 24U);
    bitField(instance, 0U, 4U);
}

#endif // SEND_LUTRON 
