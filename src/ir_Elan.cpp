// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:38:22 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Elan".


#include "IRremote.h"
/*
IRP: 
{40.2k,398,msb}<1,-1|1,-2>(3,-2,D:8,~D:8,2,-2,F:8,~F:8,1,^50m)*[D:0..255,F:0..255]
*/

/*
Protocol documentation:
See the JP1-forum for the executor.
*/

#if SEND_ELAN

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);

static unsigned long durationCounter = 0UL;

static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
    durationCounter += (unsigned long) d;
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
    durationCounter += (unsigned long) d;
}

static inline void extent(IRsend* instance, unsigned long d) {
    instance->space((unsigned int)(d - durationCounter));
    durationCounter = 0UL;
}

static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            flash(instance, 398);
            gap(instance, 398);
        }
        break;
        case 1: {
            flash(instance, 398);
            gap(instance, 796);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Elan.
 * @param D Protocol parameter in the interval [0 .. 255].
 * @param F Protocol parameter in the interval [0 .. 255].
 */
void IRsend::sendElan(unsigned int D,
        unsigned int F) {
    enableIROut(40200U / 1000U);
    IRsend* instance = this;
    durationCounter = 0UL;
    flash(instance, 1194);
    gap(instance, 796);
    bitField(instance, D, 8U);
    bitField(instance, ~D, 8U);
    flash(instance, 796);
    gap(instance, 796);
    bitField(instance, F, 8U);
    bitField(instance, ~F, 8U);
    flash(instance, 398);
    extent(instance, 50000UL);
}

#endif // SEND_ELAN 
