// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:39:58 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code IODATAn".


#include "IRremote.h"
/*
IRP: 
{38k,550}<1,-1|1,-3>(16,-8,x:7,D:7,S:7,y:7,F:8,C:4,1,^108m)*{n=F:4^F:4:4^C:4}[D:0..127,S:0..127,F:0..255,C:0..15=0,x:0..127=0,y:0..127=0]
*/

/*
Protocol documentation:
This is potentially a class of protocols distinguished by values of n, x and y with n = 0..15 and x, y = 0..127. If x and y are both zero, they are omitted. The only known example is IODATA1.
*/

#if SEND_IODATAN

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);

static unsigned long durationCounter = 0UL;

static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
    durationCounter += (unsigned long) d;
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
    durationCounter += (unsigned long) d;
}

static inline void extent(IRsend* instance, unsigned long d) {
    instance->space((unsigned int)(d - durationCounter));
    durationCounter = 0UL;
}

static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 550);
            gap(instance, 550);
        }
        break;
        case 1: {
            flash(instance, 550);
            gap(instance, 1650);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int n(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int C,
        unsigned int x,
        unsigned int y) {
    return ((finiteBitField(F, 4U, 0, false, false))^(finiteBitField(F, 4U, 4U, false, false)))^(finiteBitField(C, 4U, 0, false, false));
}

/**
 * Function for sending one signal from the protcol IODATAn.
 * @param D Protocol parameter in the interval [0 .. 127].
 * @param S Protocol parameter in the interval [0 .. 127].
 * @param F Protocol parameter in the interval [0 .. 255].
 * @param C Protocol parameter in the interval [0 .. 15].
 * @param x Protocol parameter in the interval [0 .. 127].
 * @param y Protocol parameter in the interval [0 .. 127].
 */
void IRsend::sendIODATAn(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int C,
        unsigned int x,
        unsigned int y) {
    enableIROut(38000U / 1000U);
    IRsend* instance = this;
    durationCounter = 0UL;
    flash(instance, 8800);
    gap(instance, 4400);
    bitField(instance, x, 7U);
    bitField(instance, D, 7U);
    bitField(instance, S, 7U);
    bitField(instance, y, 7U);
    bitField(instance, F, 8U);
    bitField(instance, C, 4U);
    flash(instance, 550);
    extent(instance, 108000UL);
}

#endif // SEND_IODATAN 
