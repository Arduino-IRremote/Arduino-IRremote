// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:46:52 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code X10".


#include "IRremote.h"
/*
IRP: 
{40.8k,565}<2,-12|7,-7>(7,-7,F:5,~F:5,21,-7)*[F:0..31]
*/

/*
Protocol documentation:
These are two variants of the same Home Automation protocol. They differ in that X10.n has a distinctive start frame that carries a sequence number, the n of the protocol name, in addition to the OBC. The repeat frames, and all frames of the X10 version, only carry the OBC. The value of n runs from 0 to 15 (or some lower value) and then restarts again at 0. It is incremented on each successive keypress. A valid X10.n signal must have at least one repeat frame. If this is missing then the Misc column shows \"invalid signal\". RemoteMaster has a single protocol, named X10 with PID 003F, that sends X10.n signals. This is the same as the UEI protocol with that PID. There is no control over the value of n, this is handled automatically by the remote. The newer UEI protocol, with PID 01DF, sends X10 signals.
*/

#if SEND_X10

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 1130);
            gap(instance, 6780);
        }
        break;
        case 1: {
            flash(instance, 3955);
            gap(instance, 3955);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol X10.
 * @param F Protocol parameter in the interval [0 .. 31].
 */
void IRsend::sendX10(unsigned int F) {
    enableIROut(40800U / 1000U);
    IRsend* instance = this;
    flash(instance, 3955);
    gap(instance, 3955);
    bitField(instance, F, 5U);
    bitField(instance, ~F, 5U);
    flash(instance, 11865);
    gap(instance, 3955);
}

#endif // SEND_X10 
