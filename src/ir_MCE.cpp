// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:41:03 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code MCE".


#include "IRremote.h"
/*
IRP: 
{36k,444,msb}<-1,1|1,-1>((6,-2,1:1,6:3,-2,2,OEM1:8,S:8,T:1,D:7,F:8,^107m)*,T=1-T){OEM1=128}[D:0..127,S:0..255,F:0..255,T@:0..1=0]
*/

/*
Protocol documentation:
MCE is a member of the RC6 family. Technically it is RC6-6-32 with the standard toggle bit zero, with the OEM1 field equal to 128, and with a nonstandard (for the RC6 family) toggle bit added. If all those rules are met, DecodeIr will display the name as \"MCE\" and with the OEM2 field moved to the subdevice position. Otherwise it will display RC6-6-32.
*/

#if SEND_MCE

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);

static unsigned long durationCounter = 0UL;

static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
    durationCounter += (unsigned long) d;
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
    durationCounter += (unsigned long) d;
}

static inline void extent(IRsend* instance, unsigned long d) {
    instance->space((unsigned int)(d - durationCounter));
    durationCounter = 0UL;
}

static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            gap(instance, 444);
            flash(instance, 444);
        }
        break;
        case 1: {
            flash(instance, 444);
            gap(instance, 444);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int OEM1(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int T) {
    return 128U;
}

/**
 * Function for sending one signal from the protcol MCE.
 * @param D Protocol parameter in the interval [0 .. 127].
 * @param S Protocol parameter in the interval [0 .. 255].
 * @param F Protocol parameter in the interval [0 .. 255].
 * @param T Protocol parameter in the interval [0 .. 1].
 */
void IRsend::sendMCE(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int T) {
    enableIROut(36000U / 1000U);
    IRsend* instance = this;
    durationCounter = 0UL;
    flash(instance, 2664);
    gap(instance, 888);
    bitField(instance, 1U, 1U);
    bitField(instance, 6U, 3U);
    gap(instance, 888);
    flash(instance, 888);
    bitField(instance, OEM1(D, S, F, T), 8U);
    bitField(instance, S, 8U);
    bitField(instance, T, 1U);
    bitField(instance, D, 7U);
    bitField(instance, F, 8U);
    extent(instance, 107000UL);
}

#endif // SEND_MCE 
