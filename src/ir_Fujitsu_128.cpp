// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:38:58 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Fujitsu-128".


#include "IRremote.h"
/*
IRP: 
{38.4k,413}<1,-1|1,-3>(8,-4,A0:8,A1:8,A2:8,A3:8,A4:8,A5:8,A6:8,A7:8,A8:8,A9:8,A10:8,A11:8,A12:8,A13:8,A14:8,A15:8,1,-104.3m)*[A0:0..255,A1:0..255,A2:0..255,A3:0..255,A4:0..255,A5:0..255,A6:0..255,A7:0..255,A8:0..255,A9:0..255,A10:0..255,A11:0..255,A12:0..255,A13:0..255,A14:0..255,A15:0..255]
*/

/*
Protocol documentation:

*/

#if SEND_FUJITSU_128

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 413);
            gap(instance, 413);
        }
        break;
        case 1: {
            flash(instance, 413);
            gap(instance, 1239);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Fujitsu_128.
 * @param A0 Protocol parameter in the interval [0 .. 255].
 * @param A1 Protocol parameter in the interval [0 .. 255].
 * @param A2 Protocol parameter in the interval [0 .. 255].
 * @param A3 Protocol parameter in the interval [0 .. 255].
 * @param A4 Protocol parameter in the interval [0 .. 255].
 * @param A5 Protocol parameter in the interval [0 .. 255].
 * @param A6 Protocol parameter in the interval [0 .. 255].
 * @param A7 Protocol parameter in the interval [0 .. 255].
 * @param A8 Protocol parameter in the interval [0 .. 255].
 * @param A9 Protocol parameter in the interval [0 .. 255].
 * @param A10 Protocol parameter in the interval [0 .. 255].
 * @param A11 Protocol parameter in the interval [0 .. 255].
 * @param A12 Protocol parameter in the interval [0 .. 255].
 * @param A13 Protocol parameter in the interval [0 .. 255].
 * @param A14 Protocol parameter in the interval [0 .. 255].
 * @param A15 Protocol parameter in the interval [0 .. 255].
 */
void IRsend::sendFujitsu_128(unsigned int A0,
        unsigned int A1,
        unsigned int A2,
        unsigned int A3,
        unsigned int A4,
        unsigned int A5,
        unsigned int A6,
        unsigned int A7,
        unsigned int A8,
        unsigned int A9,
        unsigned int A10,
        unsigned int A11,
        unsigned int A12,
        unsigned int A13,
        unsigned int A14,
        unsigned int A15) {
    enableIROut(38400U / 1000U);
    IRsend* instance = this;
    flash(instance, 3304);
    gap(instance, 1652);
    bitField(instance, A0, 8U);
    bitField(instance, A1, 8U);
    bitField(instance, A2, 8U);
    bitField(instance, A3, 8U);
    bitField(instance, A4, 8U);
    bitField(instance, A5, 8U);
    bitField(instance, A6, 8U);
    bitField(instance, A7, 8U);
    bitField(instance, A8, 8U);
    bitField(instance, A9, 8U);
    bitField(instance, A10, 8U);
    bitField(instance, A11, 8U);
    bitField(instance, A12, 8U);
    bitField(instance, A13, 8U);
    bitField(instance, A14, 8U);
    bitField(instance, A15, 8U);
    flash(instance, 413);
    gap(instance, 104300);
}

#endif // SEND_FUJITSU_128 
