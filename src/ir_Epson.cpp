// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:38:31 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Epson".


#include "IRremote.h"
/*
IRP: 
{38.4k,577}<2,-1|1,-2|1,-1|2,-2>((4,-1,D:8,T1:2,OBC:6,T2:2,S:8,1,-75m)*,(4,-1,D:8,~F1:2,OBC:6,~F2:2,S:8,1,-250m))[D:0..255,S:0..255,OBC:0..63,T1:0..3,T2:0..3,F1:0..3,F2:0..3]
*/

/*
Protocol documentation:
Forum thread
*/

#if SEND_EPSON

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    static unsigned int pendingBits = 0U;
    static unsigned int pendingData = 0U;
    if (pendingBits > 0U) {
        // This code is valid for msb-first only
        data &= (1U << width) - 1U;
        data |= pendingData << width;
        width += pendingBits;
        pendingBits = 0U;
    }
    if (width % 2U != 0U) {
        pendingData = data;
        pendingBits = width;
        width = 0U;
    }
    for (unsigned int i = 0; i < width; i += 2) {
        switch(((unsigned int)data >> i) & 3) {
        case 0: {
            flash(instance, 1154);
            gap(instance, 577);
        }
        break;
        case 1: {
            flash(instance, 577);
            gap(instance, 1154);
        }
        break;
        case 2: {
            flash(instance, 577);
            gap(instance, 577);
        }
        break;
        case 3: {
            flash(instance, 1154);
            gap(instance, 1154);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Epson.
 * @param D Protocol parameter in the interval [0 .. 255].
 * @param S Protocol parameter in the interval [0 .. 255].
 * @param OBC Protocol parameter in the interval [0 .. 63].
 * @param T1 Protocol parameter in the interval [0 .. 3].
 * @param T2 Protocol parameter in the interval [0 .. 3].
 * @param F1 Protocol parameter in the interval [0 .. 3].
 * @param F2 Protocol parameter in the interval [0 .. 3].
 */
void IRsend::sendEpson(unsigned int D,
        unsigned int S,
        unsigned int OBC,
        unsigned int T1,
        unsigned int T2,
        unsigned int F1,
        unsigned int F2) {
    enableIROut(38400U / 1000U);
    IRsend* instance = this;
    flash(instance, 2308);
    gap(instance, 577);
    bitField(instance, D, 8U);
    bitField(instance, T1, 2U);
    bitField(instance, OBC, 6U);
    bitField(instance, T2, 2U);
    bitField(instance, S, 8U);
    flash(instance, 577);
    gap(instance, 75000);
}

#endif // SEND_EPSON 
