// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:40:49 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Lumagen".


#include "IRremote.h"
/*
IRP: 
{38.4k,416,msb}<1,-6|1,-12>(D:4,C:1,F:7,1,-26)*{C=(#F+1)&1}[D:0..15,F:0..127]
*/

/*
Protocol documentation:

*/

#if SEND_LUMAGEN

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            flash(instance, 416);
            gap(instance, 2496);
        }
        break;
        case 1: {
            flash(instance, 416);
            gap(instance, 4992);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int C(unsigned int D,
        unsigned int F) {
    return ((bitCount(F)) + (1U))&(1U);
}

/**
 * Function for sending one signal from the protcol Lumagen.
 * @param D Protocol parameter in the interval [0 .. 15].
 * @param F Protocol parameter in the interval [0 .. 127].
 */
void IRsend::sendLumagen(unsigned int D,
        unsigned int F) {
    enableIROut(38400U / 1000U);
    IRsend* instance = this;
    bitField(instance, D, 4U);
    bitField(instance, C(D, F), 1U);
    bitField(instance, F, 7U);
    flash(instance, 416);
    gap(instance, 10816);
}

#endif // SEND_LUMAGEN 
