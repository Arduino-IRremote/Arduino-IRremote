// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:45:12 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Sharp{1}".


#include "IRremote.h"
/*
IRP: 
{38k,264}<1,-3|1,-7>(D:5,F:8,1:2,1,-165)*[D:0..31,F:0..255]
*/

/*
Protocol documentation:
A Sharp signal has two halves, either one of which is enough to fully decode the information. A significant fraction of Sharp learned signals contain just one half or have the halves separated so that DecodeIr can't process them together. When one half is seen separate from the other, DecodeIr will name the protocol Sharp{1} or Sharp{2} depending on which half is decoded. Sharp, Sharp{1} and Sharp{2} all represent the same protocol when they are correct. But only Sharp is robust. A Sharp{1} or Sharp{2} decode might be spurious.
*/

#if SEND_SHARP1

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 264);
            gap(instance, 792);
        }
        break;
        case 1: {
            flash(instance, 264);
            gap(instance, 1848);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol Sharp1.
 * @param D Protocol parameter in the interval [0 .. 31].
 * @param F Protocol parameter in the interval [0 .. 255].
 */
void IRsend::sendSharp1(unsigned int D,
        unsigned int F) {
    enableIROut(38000U / 1000U);
    IRsend* instance = this;
    bitField(instance, D, 5U);
    bitField(instance, F, 8U);
    bitField(instance, 1U, 2U);
    flash(instance, 264);
    gap(instance, 43560);
}

#endif // SEND_SHARP1 
