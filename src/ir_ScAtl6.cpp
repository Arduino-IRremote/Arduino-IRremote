// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:44:58 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code ScAtl-6".


#include "IRremote.h"
/*
IRP: 
{57.6k,846}<1,-1|1,-3>(4,-4,D:6,F:6,~D:6,~F:6,1,-40)*[D:0..63,F:0..63]
*/

/*
Protocol documentation:
ScAtl-6 is distinguished from Emerson only by frequency. So if you are using a learning system that doesn't record the frequency accurately, then DecodeIr can't accurately select between Emerson and ScAtl-6. Most Scientific Atlanta cable tuners use Panasonic_Old protocol, not this protocol.
*/

#if SEND_SCATL6

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> i) & 1) {
        case 0: {
            flash(instance, 846);
            gap(instance, 846);
        }
        break;
        case 1: {
            flash(instance, 846);
            gap(instance, 2538);
        }
        break;
        }
    }
}
/**
 * Function for sending one signal from the protcol ScAtl6.
 * @param D Protocol parameter in the interval [0 .. 63].
 * @param F Protocol parameter in the interval [0 .. 63].
 */
void IRsend::sendScAtl6(unsigned int D,
        unsigned int F) {
    enableIROut(57600U / 1000U);
    IRsend* instance = this;
    flash(instance, 3384);
    gap(instance, 3384);
    bitField(instance, D, 6U);
    bitField(instance, F, 6U);
    bitField(instance, ~D, 6U);
    bitField(instance, ~F, 6U);
    flash(instance, 846);
    gap(instance, 33840);
}

#endif // SEND_SCATL6 
