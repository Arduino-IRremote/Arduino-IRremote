// This file was generated by IrpTransmogrifier version 0.2.1dev by bengt
// on Mon Oct 23 11:47:49 CEST 2017
// using command line arguments:
// "-c /home/bengt/harctoolbox/IrpTransmogrifier/tools/../src/main/resources/IrpProtocols.xml --url --loglevel info --logformat %5$s%n code -s src/main/st --dir ../Arduino-IRremote-bm/src -t irremote-renderer-cppsymbols -t irremote-renderer-declarations -t irremote-renderer-code Zaptor-36".


#include "IRremote.h"
/*
IRP: 
{36k,330,msb}<-1,1|1,-1>([][T=0][T=1],8,-6,2,D:8,T:1,S:7,F:8,E:4,C:4,-74m){C=(D:4+D:4:4+S:4+S:3:4+8*T+F:4+F:4:4+E)&15}[D:0..255,S:0..127,F:0..127,E:0..15]
*/

/*
Protocol documentation:
where T=0 for all frames except the last, T=1 for last frame, E is a checksum seed. A protocol so far seen only in the Motorola Zaptor.
*/

#if SEND_ZAPTOR36

extern unsigned int finiteBitField(unsigned int data,
        unsigned int width,
        unsigned int chop,
        bool complement,
        bool reverse);
extern unsigned int bitCount(unsigned int data);
extern unsigned int bitReverse(unsigned int data, unsigned int width);


static inline void flash(IRsend* instance, unsigned int d) {
    instance->mark(d);
}

static inline void gap(IRsend* instance, unsigned int d) {
    instance->space(d);
}



static void bitField(IRsend* instance, unsigned int data, unsigned int width) {
    for (unsigned int i = 0; i < width; i++) {
        switch(((unsigned int)data >> (width - i - 1)) & 1) {
        case 0: {
            gap(instance, 330);
            flash(instance, 330);
        }
        break;
        case 1: {
            flash(instance, 330);
            gap(instance, 330);
        }
        break;
        }
    }
}
// Local functions; corresponds to Definitions in the IRP.
static inline unsigned int C(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int E,
        unsigned int T) {
    return ((((((((finiteBitField(D, 4U, 0, false, false)) + (finiteBitField(D, 4U, 4U, false, false))) + (finiteBitField(S, 4U, 0, false, false))) + (finiteBitField(S, 3U, 4U, false, false))) + ((8U) * (T))) + (finiteBitField(F, 4U, 0, false, false))) + (finiteBitField(F, 4U, 4U, false, false))) + (E))&(15U);
}

/**
 * Function for sending one signal from the protcol Zaptor36.
 * @param D Protocol parameter in the interval [0 .. 255].
 * @param S Protocol parameter in the interval [0 .. 127].
 * @param F Protocol parameter in the interval [0 .. 127].
 * @param E Protocol parameter in the interval [0 .. 15].
 */
void IRsend::sendZaptor36(unsigned int D,
        unsigned int S,
        unsigned int F,
        unsigned int E) {
    enableIROut(36000U / 1000U);
    IRsend* instance = this;
    unsigned int T;
    T = 0U;
    flash(instance, 2640);
    gap(instance, 1980);
    flash(instance, 660);
    bitField(instance, D, 8U);
    bitField(instance, T, 1U);
    bitField(instance, S, 7U);
    bitField(instance, F, 8U);
    bitField(instance, E, 4U);
    bitField(instance, C(D, S, F, E, T), 4U);
    gap(instance, 74000);
}

#endif // SEND_ZAPTOR36 
